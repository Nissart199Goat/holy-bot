const { REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

async function deployCommands() {
    try {
        console.log('üöÄ D√âPLOIEMENT DES COMMANDES DISCORD');
        console.log('=====================================');
        
        // V√©rifier les variables d'environnement
        const token = process.env.TOKEN || process.env.DISCORD_TOKEN;
        const clientId = process.env.CLIENT_ID;
        const guildId = process.env.GUILD_ID;
        
        if (!token) {
            throw new Error('‚ùå TOKEN manquant dans le fichier .env');
        }
        if (!clientId) {
            throw new Error('‚ùå CLIENT_ID manquant dans le fichier .env');
        }
        if (!guildId) {
            console.log('‚ö†Ô∏è GUILD_ID manquant - d√©ploiement global (prendra 1h)');
        }
        
        console.log(`üîë Client ID: ${clientId}`);
        console.log(`üè† Guild ID: ${guildId || 'Non d√©fini (global)'}`);
        
        // Charger toutes les commandes
        const commands = [];
        const commandsPath = path.join(__dirname, 'commands');
        const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
        
        console.log(`\nüìÅ Chargement des commandes...`);
        console.log(`üìÇ Dossier: ${commandsPath}`);
        console.log(`üìÑ Fichiers trouv√©s: ${commandFiles.length}`);
        
        for (const file of commandFiles) {
            try {
                const filePath = path.join(commandsPath, file);
                delete require.cache[require.resolve(filePath)]; // Clear cache
                const command = require(filePath);
                
                if ('data' in command && 'execute' in command) {
                    commands.push(command.data.toJSON());
                    console.log(`  ‚úÖ ${command.data.name} - ${command.data.description}`);
                } else {
                    console.log(`  ‚ùå ${file} - Propri√©t√©s manquantes (data/execute)`);
                }
            } catch (error) {
                console.log(`  ‚ùå ${file} - Erreur: ${error.message}`);
            }
        }
        
        console.log(`\nüéØ Total des commandes valides: ${commands.length}`);
        
        if (commands.length === 0) {
            throw new Error('‚ùå Aucune commande valide trouv√©e !');
        }
        
        // Initialiser REST
        const rest = new REST({ version: '10' }).setToken(token);
        
        console.log('\nüîÑ D√©ploiement en cours...');
        
        if (guildId) {
            // D√©ploiement sur serveur sp√©cifique (RAPIDE)
            console.log('üìç Mode: D√©ploiement sur serveur sp√©cifique');
            
            // 1. Supprimer les commandes globales (au cas o√π)
            console.log('üóëÔ∏è Suppression des commandes globales...');
            await rest.put(Routes.applicationCommands(clientId), { body: [] });
            console.log('  ‚úÖ Commandes globales supprim√©es');
            
            // 2. Supprimer les commandes du serveur
            console.log('üóëÔ∏è Suppression des commandes du serveur...');
            await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: [] });
            console.log('  ‚úÖ Commandes du serveur supprim√©es');
            
            // 3. D√©ployer les nouvelles commandes sur le serveur
            console.log('üì§ D√©ploiement des nouvelles commandes...');
            const data = await rest.put(
                Routes.applicationGuildCommands(clientId, guildId),
                { body: commands }
            );
            
            console.log('\nüéâ D√âPLOIEMENT R√âUSSI !');
            console.log(`‚úÖ ${data.length} commandes d√©ploy√©es sur le serveur`);
            console.log('‚ö° Les commandes sont disponibles IMM√âDIATEMENT');
            
        } else {
            // D√©ploiement global (LENT)
            console.log('üåç Mode: D√©ploiement global');
            
            // 1. Supprimer toutes les commandes globales
            console.log('üóëÔ∏è Suppression des commandes globales...');
            await rest.put(Routes.applicationCommands(clientId), { body: [] });
            console.log('  ‚úÖ Commandes globales supprim√©es');
            
            // 2. D√©ployer les nouvelles commandes globalement
            console.log('üì§ D√©ploiement des nouvelles commandes...');
            const data = await rest.put(
                Routes.applicationCommands(clientId),
                { body: commands }
            );
            
            console.log('\nüéâ D√âPLOIEMENT R√âUSSI !');
            console.log(`‚úÖ ${data.length} commandes d√©ploy√©es globalement`);
            console.log('‚è∞ Les commandes seront disponibles dans ~1 heure');
        }
        
        console.log('\nüìã Commandes d√©ploy√©es:');
        commands.forEach((cmd, index) => {
            console.log(`  ${index + 1}. /${cmd.name} - ${cmd.description}`);
        });
        
        console.log('\n‚ú® D√©ploiement termin√© avec succ√®s !');
        
    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DU D√âPLOIEMENT:');
        console.error(error.message);
        console.error('\nüîß V√©rifiez:');
        console.error('  - Votre fichier .env contient TOKEN et CLIENT_ID');
        console.error('  - Votre bot a les permissions n√©cessaires');
        console.error('  - Vos fichiers de commandes sont valides');
        process.exit(1);
    }
}

// Ex√©cuter le d√©ploiement
deployCommands(); 